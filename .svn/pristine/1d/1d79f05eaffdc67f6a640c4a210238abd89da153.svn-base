@model WBT.DLCustomerCreation.CustomerPromotion
@using WBT.Common

<div class="row">
    <div class="col-md-12">
        <div>
            <div class="card card-primary">
                <div class="card-header">
                    <h3 class="card-title"> Customers List </h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse"><i class="fas fa-minus"></i></button>
                        <button type="button" class="btn btn-tool" data-card-widget="remove"><i class="fas fa-times"></i></button>
                    </div>
                </div>
                <div class="card-body">
                    @if (ViewBag.UpdatedRecords != null && ViewBag.TotalRecords != null && ViewBag.PendingRecords != null)
                    {
                        <div class="table-responsive pt-3" style="border:1px solid #0094ff;border-radius:10px;">
                            <div class="panel-body">
                                <div class="row" style="margin:5px 5px 5px 5px;">
                                    <div class="col-md-4 text-center">
                                        <label class="badge badge-dark"> Total Records :  <b style="font-size:17px;">@ViewBag.TotalRecords</b></label>
                                    </div>
                                    <div class="col-md-4 text-center">
                                        <label class="badge badge-primary"> Updated Records : <b style="font-size:17px;">@ViewBag.UpdatedRecords</b></label>
                                    </div>
                                    <div class="col-md-4 text-center">
                                        <label class="badge badge-danger"> Pending Records :  <b style="font-size:17px;">@ViewBag.PendingRecords</b> </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="text-md-right">

                    </div>
                    @using (Ajax.BeginForm("Promotion", "AppUsers", null, new AjaxOptions
                    {
                        OnSuccess = "onPromoSuccess_Ajax",
                        HttpMethod = "post",
                        LoadingElementId = "promoprogress"
                    }, new { @class = "form-sample", @id = "frm-promote", @enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class=" pt-3 table-responsive">
                            <table class="table table-bordered dataGrid" id="dataGrid">
                                <thead>
                                    <tr>
                                        <th>
                                            Firm Name
                                        </th>
                                        <th>
                                            Owner Name
                                        </th>
                                        <th>
                                            Mobile
                                        </th>
                                        <th>
                                            Email ID
                                        </th>
                                        <th>
                                            Area
                                        </th>
                                        <th>
                                            City
                                        </th>
                                        <th>
                                            State
                                        </th>
                                        <th style="display:none;">
                                            Ledger Type
                                        </th>
                                        <th style="display:none;">
                                            Company Type
                                        </th>
                                        <th style="display:none;">
                                            Customer Type
                                        </th>
                                        <th style="display:none;">
                                            Category Type
                                        </th>
                                        <th style="display:none;">
                                            Taxation Type
                                        </th>
                                        <th>
                                            Created by
                                        </th>
                                        <th>
                                            Updated by
                                        </th>
                                        <th class="noExport text-center">@Html.CheckBox("CheckAll", false, new { id = "select_all" })</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model != null)
                                    {
                                        int j = 0;
                                        if (Model.customerList != null && Model.customerList.Count() > 0)
                                        {
                                            foreach (var item in Model.customerList)
                                            {
                                                <tr>
                                                    <td>
                                                        @Html.HiddenFor(a => a.customerList[j].CustID)
                                                        @Html.TextBoxFor(a => a.customerList[j].FirmName, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(a => a.customerList[j].Name, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(a => a.customerList[j].MobileNumber, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(a => a.customerList[j].EmailID, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(a => a.customerList[j].BillingArea, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(a => a.customerList[j].BillingCity, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(a => a.customerList[j].BillingState, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td style="display:none;">
                                                        @Html.DisplayFor(a => a.customerList[j].LedgerType, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td style="display:none;">
                                                        @Html.DisplayFor(a => a.customerList[j].CompanyType, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td style="display:none;">
                                                        @Html.DisplayFor(a => a.customerList[j].CustomerType, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td style="display:none;">
                                                        @Html.DisplayFor(a => a.customerList[j].TypeofCategory, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td style="display:none;">
                                                        @Html.DisplayFor(a => a.customerList[j].RegistrationType, new { @style = "border:none", @readonly = "readonly" })
                                                    </td>
                                                    <td>@item.CreatedStr</td>
                                                    <td>@item.UpdatedStr</td>
                                                    <td class="noExport text-center">
                                                        @Html.CheckBoxFor(a => a.customerList[j].IsChecked, new { @class = "chhselect" })
                                                    </td>
                                                </tr>
                                                j++;
                                            }
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                        <h4 class="card-title">Promote</h4>
                        <p class="card-description">
                        </p>
                        <div class="row">
                            <div class="col-md-4">
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <div class="form-check">
                                        @Html.CheckBoxFor(m => m.IsEmail) Email
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <div class="form-check">
                                        @Html.CheckBoxFor(m => m.IsSMS) SMS
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <div class="form-check">
                                        @Html.CheckBoxFor(m => m.IsWhatsApp) Whatsapp
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-2">

                            </div>
                        </div>
                        <div id="SMSRow" style="display:none;">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>SMS Template</label>
                                        <div class="input-group">
                                            @Html.DropDownListFor(model => model.SMSTemplateID, (SelectList)ViewBag.SMSTemplates, "Select Template",  new { @class = "form-control listbox", @required = "required", @onchange = "SMSTemplateChanged()" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>SMS Body</label>
                                        @Html.TextAreaFor(model => model.SMSBody, new { @class = "form-control input-lg", @required = "required", @maxlength = "160" })
                                        @Html.ValidationMessageFor(model => model.SMSBody, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="EmailRow" style="display:none;">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>Email Template</label>
                                        <div class="input-group">
                                            @Html.DropDownListFor(model => model.EmailTemplateID, (SelectList)ViewBag.EmailTemplates, "Select Template", new { @class = "form-control listbox", @required = "required", @onchange = "EmailTemplateChanged()" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6" id="subjectRow">
                                    <div class="form-group">
                                        <label>Mail Subject</label>
                                        @Html.TextBoxFor(model => model.MailSubject, new { @class = "form-control", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.MailSubject, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label>Attachments</label>
                                        <input type="file" id="postedFile" name="postedFile" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>Your Message</label>
                                        @Html.TextAreaFor(model => model.MailBody, new { @class = "form-control input-lg textarea-editor", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.MailBody, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="whatsappRow" style="display:none">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>Whatsapp Template</label>
                                        <div class="input-group">
                                            @Html.DropDownListFor(model => model.EmailTemplateID, (SelectList)ViewBag.WhatsappTemplates, "Select Template", new { @class = "form-control listbox", @required = "required", @onchange = "WhatsappTemplateChanged()" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label>Attachments</label>
                                        <input type="file" id="postedFile" name="postedFile" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label>Your Message</label>
                                        @Html.TextAreaFor(model => model.MailBody, new { @class = "form-control input-lg", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.MailBody, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="clearfix"></div>
                        <div class="card-footer">
                            <div class="text-center">
                                <button type="submit" class="btn btn-primary" onclick="return onPromoteClick()">Promote</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div id="promoprogress" class="modal">
    <div class="center" style="margin: 0px; padding: 0px; position: fixed; right: 0px; top: 0px; width: 100%; height: 100%; background-color: rgb(102, 102, 102); z-index: 30001; opacity: 0.8;">
        <p style="position: absolute; color: White; top: 50%; left: 45%;">
            <span>Loading, Please Wait...</span> <img src="~/images/loading.gif" height="100" width="100" />
        </p>
    </div>
</div>

<script>
    function SMSTemplateChanged() {
        var TemplateID = $("#SMSTemplateID").val();
        if (TemplateID != "" && TemplateID != null) {
            $("#progress").show();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetSMSTemplate", "PerformanceReport")',
                dataType: "json",
                data: { TemplateID: TemplateID},
                success: function (response) {
                    if (response == "sessionexpired") {
                        window.location = '@Url.Action("Index", "AppUsers")';
                    }
                    $("#SMSBody").val(response.TemplateBody);
                    $("#progress").hide();
                },
                error: function () {
                    $("#progress").hide();
                }
            });
        }
    }
    function EmailTemplateChanged() {
        var TemplateID = $("#EmailTemplateID").val();
        if (TemplateID != "" && TemplateID != null) {
            $("#progress").show();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetEmailTemplate", "PerformanceReport")',
                dataType: "json",
                data: { TemplateID: TemplateID},
                success: function (response) {
                    if (response == "sessionexpired") {
                        window.location = '@Url.Action("Index", "AppUsers")';
                    }
                    
                    $("#MailSubject").val(response.TemplateSubject);
                    //$("#MailBody").val(response.TemplateBody);
                    $("#MailBody").summernote("code", response.TemplateBody);
                    $("#progress").hide();
                },
                error: function () {
                    $("#progress").hide();
                }
            });
        }
    }
    function WhatsappTemplateChanged() {

    }
</script>
<script>
        $(document).ready(function () {
            $("#IsEmail").click(function () {
                if (this.checked) {
                    $("#IsSMS").prop('checked', false);
                    $("#IsWhatsApp").prop('checked', false);
                    $("#SMSRow").hide();
                    $("#EmailRow").show();
                    $("#whatsappRow").hide();
                    $('#SMSBody').removeAttr('required');
                    $('.textarea-editor').summernote({
                        height: 100, // set editor height
                        minHeight: null, // set minimum height of editor
                        maxHeight: null, // set maximum height of editor
                        focus: false // set focus to editable area after initializing summernote
                    });
                }
                else {
                    $("#EmailRow").hide();
                }
            });
            $("#IsSMS").click(function () {
                if (this.checked) {
                    $("#IsEmail").prop('checked', false);
                    $("#IsWhatsApp").prop('checked', false);
                    $("#SMSRow").show();
                    $("#whatsappRow").hide();
                    $("#EmailRow").hide();
                    $('#MailBody').removeAttr('required');
                    $('#MailSubject').removeAttr('required');
                }
                else {
                    $("#SMSRow").hide();
                }
            });
            $("#IsWhatsApp").click(function () {
                if (this.checked) {
                    $("#SMSRow").hide();
                    $("#EmailRow").hide();
                    $("#IsEmail").prop('checked', false);
                    $("#IsSMS").prop('checked', false);
                    $("#whatsappRow").show();
                }
            });
            function onPromoteClick() {
                if (!$('#IsEmail').is(':checked') && !$('#IsSMS').is(':checked') && !$('#IsWhatsApp').is(':checked')) {
                    alert("Check atleast one checkbox to promote");
                    return false;
                }
                var checked_checkboxes = $(".dataGrid input[type=checkbox]:checked");
                if (checked_checkboxes.length == 0) {
                    alert("Check atleast one checkbox from the above list to promote");
                    return false;
                }
            }
        });
    </script>
<script>
    $.validator.unobtrusive.parse(document);
</script>
<script>
    $("#frm-promote").validate();
</script>